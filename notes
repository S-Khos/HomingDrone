                # top left
            #cv2.line(frame, (x, y), (x + 50, y), white, 1)
            #cv2.line(frame, (x, y), (x, y + 50), white, 1)
                # top right
            #cv2.line(frame, (x + w, y), (x + w - 50, y), white, 1)
            #cv2.line(frame, (x + w, y), (x + w, y + 50), white, 1)
                # bottom left
            #cv2.line(frame, (x, y + h), (x + 50, y + h), white, 1)
            #cv2.line(frame, (x, y + h), (x, y + h - 50), white, 1)
                # bottom right
            #cv2.line(frame, (x + w, y + h), (x + w - 50, y + h), white, 1)
            #cv2.line(frame, (x + w, y + h), (x + w, y + h - 50), white, 1)




def flight_control():
    global tello, roi, tracking, manual_control, pid, prev_x_error, prev_y_error, cur_x_error, cur_y_error, flt_thread_init, centreX, centreY, lock2
    print("[PID] - STARTED")
    while tracking:
        x, y, w, h = [int(value) for value in roi]
        cur_x_error = centreX - (x + w // 2)
        cur_y_error = centreY - (y + h // 2)
        x_spd = (pid[0] * cur_x_error + pid[1] * (cur_x_error - prev_x_error)) * -1
        y_spd = pid[0] * cur_y_error + pid[1] * (cur_y_error - prev_y_error)
        x_spd = int(np.clip(x_spd, -100, 100))
        y_spd = int(np.clip(y_spd, -100, 100))
        prev_x_error = x_spd
        prev_y_error = y_spd
        #print("[PID]  X: {}   Y: {}".format(x_spd, y_spd))
        tello.yaw_velocity = int(x_spd)
        if tello.send_rc_control:
            tello.send_rc_control(0, 0, 0, tello.yaw_velocity)
    
    tello.yaw_velocity = 0
    tello.for_back_velocity = 0
    tello.left_right_velocity = 0
    tello.up_down_velocity = 0
    flt_thread_init = False
    cur_x_error = 0
    cur_y_error = 0
    prev_x_error = 0
    prev_y_error = 0
    if tello.send_rc_control:
        tello.send_rc_control(0, 0, 0, tello.yaw_velocity)
    print("[PID] - TERMINATED")



            if (manual_control == False and flt_thread_init == False):
                flight_ctrl_thread = threading.Thread(target=flight_control, daemon=True)
                flight_ctrl_thread.start()
                flt_thread_init = True
            else:
                if (flight_ctrl_thread):
                    print("[PID] - RESET")
                    flight_ctrl_thread = None



    #x_spd = (pid[0] * cur_x_error + pid[1] * (cur_x_error - prev_x_error)) * -1
    #y_spd = pid[0] * cur_y_error + pid[1] * (cur_y_error - prev_y_error)
    #x_spd = int((np.clip(x_spd, -100, 100)) // 3)
    #y_spd = int(np.clip(y_spd, -100, 100))